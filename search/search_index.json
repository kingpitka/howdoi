{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"howdoi \u00b6 Never have open your browser to look for answers again. Create tar archive: $ howdoi create tar archive > tar -cf backup.tar --exclude \"www/subf3\" www Format a date in bash: $ howdoi format date bash > DATE = ` date +%Y-%m-%d ` Print stack trace in Python: $ howdoi print stack trace python > import traceback > > try: > 1 /0 > except: > print '>>> traceback <<<' > traceback.print_exc () > print '>>> end of traceback <<<' > traceback.print_exc () Convert MP4 to GIF: $ howdoi convert mp4 to animated gif > video = /path/to/video.avi > outdir = /path/to/output.gif > mplayer \" $video \" \\ > -ao null \\ > -ss \"00:01:00\" \\ # starting point > -endpos 10 \\ # duration in second > -vo gif89a:fps = 13 :output = $outdir \\ > -vf scale = 240 :180","title":"howdoi"},{"location":"#howdoi","text":"Never have open your browser to look for answers again. Create tar archive: $ howdoi create tar archive > tar -cf backup.tar --exclude \"www/subf3\" www Format a date in bash: $ howdoi format date bash > DATE = ` date +%Y-%m-%d ` Print stack trace in Python: $ howdoi print stack trace python > import traceback > > try: > 1 /0 > except: > print '>>> traceback <<<' > traceback.print_exc () > print '>>> end of traceback <<<' > traceback.print_exc () Convert MP4 to GIF: $ howdoi convert mp4 to animated gif > video = /path/to/video.avi > outdir = /path/to/output.gif > mplayer \" $video \" \\ > -ao null \\ > -ss \"00:01:00\" \\ # starting point > -endpos 10 \\ # duration in second > -vo gif89a:fps = 13 :output = $outdir \\ > -vf scale = 240 :180","title":"howdoi"},{"location":"contributing/","text":"General guidelines \u00b6 Be sure to go through these items before creating a new issue: Check the existing issues to see if anyone is already working or have already worken on your issue or a similar one. If there are no current or past issues similar to yours, be sure to give a a complete description when creating it. Wait for feedback on the issue before starting to work. Tip Include instructions on how to reproduce the bug you found or specific use cases of a requested feature. Note Follow Github's guide to collaborating efficiently . Setting up development environment \u00b6 Clone the git repository $ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment $ python3 -m venv .venv $ source .venv/bin/activate Install packages $ pip install -r requirements.txt Running howdoi \u00b6 Run on the command-line python -m howdoi QUERY Note If you try running python howdoi/howdoi.py (without -m ) you might get ValueError: Attempted relative import in non-package . If you want to use howdoi from within a python script, just pass your query to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" output = howdoi . howdoi ( query ) Or parse it yourself and passed the arguments to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" parser = howdoi . get_parser () args = vars ( parser . parse_args ( query . split ( ' ' ))) output = howdoi . howdoi ( args ) Attention Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Prefer the first example. Submitting Pull Requests \u00b6 Before PRs are accepted they must pass all Travis tests and not have any flake8 or pylint warnings or errors. Testing \u00b6 Howdoi uses python's unittest library for unit testing. Run the unit tests locally $ python -m test_howdoi It's also possible to run only specific tests $ python -m unittest test_howdoi.TestClass.test_method Make sure all tests pass before submitting a PR. Tip Remmember to run the tests while inside the virtual environment (run source .venv/bin/activate to activate it). Linting \u00b6 Run linting locally with flake8 $ flake8 Or pylint $ pylint * Tip Howdoi uses vanilla configuration files for both linters ( .flake8rc and .pylintrc in the root directory), but with a max line length of 119 characters. Documentation \u00b6 To get started building the docs first download mkdocs $ pip install mkdocs-material markdown-include Commands \u00b6 python -m mkdocs new [dir-name] - Create a new project. python -m mkdocs serve - Start the live-reloading docs server. python -m mkdocs build - Build the documentation site. python -m mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Here are some example alerts you can use \u00b6 These are from the Adomonition extension Attention attention alert Caution caution alert Warning warning alert Danger danger alert Error error alert Hint hint alert Important important alert Tip tip alert Note note alert Custom Custom alert Alternatively you can use the !!! type \"Custom Title\" format to get the correct type emoji and use any title you want like so: Tip type alert but with a custom title they're good aren't they Include source code in 1 line of code \u00b6 To import code we can use this syntax inside of a code block with the language label: \"{!path/to/file!}\". Here's ../howdoi/__init__.py { ! ../ howdoi / __init__ . py ! } Here is a choice tab \u00b6 Proper syntax highlighted code blocks in these don't work the way you'd think and I don't know how to get them to work normally without some extension Python To do x in python use this code: def main (): print ( \"Hello world\" ) if __name__ == \"__main__\" : main () Golang To do x in golang use this code: package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } You can include the contents of a file { ! ../ howdoi / __init__ . py ! }","title":"Contributing"},{"location":"contributing/#general-guidelines","text":"Be sure to go through these items before creating a new issue: Check the existing issues to see if anyone is already working or have already worken on your issue or a similar one. If there are no current or past issues similar to yours, be sure to give a a complete description when creating it. Wait for feedback on the issue before starting to work. Tip Include instructions on how to reproduce the bug you found or specific use cases of a requested feature. Note Follow Github's guide to collaborating efficiently .","title":"General guidelines"},{"location":"contributing/#setting-up-development-environment","text":"Clone the git repository $ git clone https://github.com/gleitz/howdoi.git Setup and activate a virtual environment $ python3 -m venv .venv $ source .venv/bin/activate Install packages $ pip install -r requirements.txt","title":"Setting up development environment"},{"location":"contributing/#running-howdoi","text":"Run on the command-line python -m howdoi QUERY Note If you try running python howdoi/howdoi.py (without -m ) you might get ValueError: Attempted relative import in non-package . If you want to use howdoi from within a python script, just pass your query to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" output = howdoi . howdoi ( query ) Or parse it yourself and passed the arguments to howdoi.howdoi() from howdoi import howdoi query = \"for loop python\" parser = howdoi . get_parser () args = vars ( parser . parse_args ( query . split ( ' ' ))) output = howdoi . howdoi ( args ) Attention Parsing queries yourself is the older way to pass in queries and may be deprecated in the future. Prefer the first example.","title":"Running howdoi"},{"location":"contributing/#submitting-pull-requests","text":"Before PRs are accepted they must pass all Travis tests and not have any flake8 or pylint warnings or errors.","title":"Submitting Pull Requests"},{"location":"contributing/#testing","text":"Howdoi uses python's unittest library for unit testing. Run the unit tests locally $ python -m test_howdoi It's also possible to run only specific tests $ python -m unittest test_howdoi.TestClass.test_method Make sure all tests pass before submitting a PR. Tip Remmember to run the tests while inside the virtual environment (run source .venv/bin/activate to activate it).","title":"Testing"},{"location":"contributing/#linting","text":"Run linting locally with flake8 $ flake8 Or pylint $ pylint * Tip Howdoi uses vanilla configuration files for both linters ( .flake8rc and .pylintrc in the root directory), but with a max line length of 119 characters.","title":"Linting"},{"location":"contributing/#documentation","text":"To get started building the docs first download mkdocs $ pip install mkdocs-material markdown-include","title":"Documentation"},{"location":"contributing/#commands","text":"python -m mkdocs new [dir-name] - Create a new project. python -m mkdocs serve - Start the live-reloading docs server. python -m mkdocs build - Build the documentation site. python -m mkdocs help - Print this help message.","title":"Commands"},{"location":"contributing/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"contributing/#here-are-some-example-alerts-you-can-use","text":"These are from the Adomonition extension Attention attention alert Caution caution alert Warning warning alert Danger danger alert Error error alert Hint hint alert Important important alert Tip tip alert Note note alert Custom Custom alert Alternatively you can use the !!! type \"Custom Title\" format to get the correct type emoji and use any title you want like so: Tip type alert but with a custom title they're good aren't they","title":"Here are some example alerts you can use"},{"location":"contributing/#include-source-code-in-1-line-of-code","text":"To import code we can use this syntax inside of a code block with the language label: \"{!path/to/file!}\". Here's ../howdoi/__init__.py { ! ../ howdoi / __init__ . py ! }","title":"Include source code in 1 line of code"},{"location":"contributing/#here-is-a-choice-tab","text":"Proper syntax highlighted code blocks in these don't work the way you'd think and I don't know how to get them to work normally without some extension Python To do x in python use this code: def main (): print ( \"Hello world\" ) if __name__ == \"__main__\" : main () Golang To do x in golang use this code: package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) } You can include the contents of a file { ! ../ howdoi / __init__ . py ! }","title":"Here is a choice tab"},{"location":"installation/","text":"How can I install howdoi? \u00b6 To install howdoi the most straight forward method is through pip . If you already have pip installed you can simply run: pip install howdoi or pip install git+https://github.com/gleitz/howdoi.git#egg=howdoi Note Don't have pip installed yet? Follow this simple tutorial to get started If you want to use setuptools to install howdoi you can do so like this: python setup.py install","title":"Installation"},{"location":"installation/#how-can-i-install-howdoi","text":"To install howdoi the most straight forward method is through pip . If you already have pip installed you can simply run: pip install howdoi or pip install git+https://github.com/gleitz/howdoi.git#egg=howdoi Note Don't have pip installed yet? Follow this simple tutorial to get started If you want to use setuptools to install howdoi you can do so like this: python setup.py install","title":"How can I install howdoi?"},{"location":"troubleshooting/","text":"You might get the following error when installing with Homebrew: == > python setup.py install http://peak.telecommunity.com/EasyInstall.html Please make the appropriate changes for your system and try again. Fix the error by executing the following command: sudo chmod -R go+w /Library/Python/2.7/site-packages/ An official lxml for python 3.3+ for windows has not yet been released. You may get an error while installing. Try and install an unofficial binary for lxml . ```","title":"Troubleshooting"},{"location":"user-guide/","text":"Usage \u00b6 If that's your first time using howdoi, run the quick help $ howdoi howdoi Print the help manual $ howdoi # \"howdoi -h\" also prints help usage: howdoi.py [ -h ] [ -p POS ] [ -n NUM ] [ -a ] [ -l ] [ -c ] [ -C ] [ -j ] [ -v ] [ -e [ ENGINE ]] [ --save ] [ --view ] [ --remove ] [ --empty ] [ QUERY ... ] instant coding answers via the command line positional arguments: QUERY the question to answer optional arguments: -h, --help show this help message and exit -p POS, --pos POS select answer in specified position ( default: 1 ) -n NUM, --num NUM number of answers to return ( default: 1 ) -a, --all display the full text of the answer -l, --link display only the answer link -c, --color enable colorized output -C, --clear-cache clear the cache -j, --json return answers in raw json format -v, --version displays the current version of howdoi -e [ ENGINE ] , --engine [ ENGINE ] search engine for this query ( google, bing, duckduckgo ) --save, --stash stash a howdoi answer --view view your stash --remove remove an entry in your stash --empty empty your stash environment variable examples: HOWDOI_COLORIZE = 1 HOWDOI_DISABLE_CACHE = 1 HOWDOI_DISABLE_SSL = 1 HOWDOI_SEARCH_ENGINE = google HOWDOI_URL = serverfault.com","title":"User Guide"},{"location":"user-guide/#usage","text":"If that's your first time using howdoi, run the quick help $ howdoi howdoi Print the help manual $ howdoi # \"howdoi -h\" also prints help usage: howdoi.py [ -h ] [ -p POS ] [ -n NUM ] [ -a ] [ -l ] [ -c ] [ -C ] [ -j ] [ -v ] [ -e [ ENGINE ]] [ --save ] [ --view ] [ --remove ] [ --empty ] [ QUERY ... ] instant coding answers via the command line positional arguments: QUERY the question to answer optional arguments: -h, --help show this help message and exit -p POS, --pos POS select answer in specified position ( default: 1 ) -n NUM, --num NUM number of answers to return ( default: 1 ) -a, --all display the full text of the answer -l, --link display only the answer link -c, --color enable colorized output -C, --clear-cache clear the cache -j, --json return answers in raw json format -v, --version displays the current version of howdoi -e [ ENGINE ] , --engine [ ENGINE ] search engine for this query ( google, bing, duckduckgo ) --save, --stash stash a howdoi answer --view view your stash --remove remove an entry in your stash --empty empty your stash environment variable examples: HOWDOI_COLORIZE = 1 HOWDOI_DISABLE_CACHE = 1 HOWDOI_DISABLE_SSL = 1 HOWDOI_SEARCH_ENGINE = google HOWDOI_URL = serverfault.com","title":"Usage"}]}